from abc import ABC, abstractmethod

class Person(ABC):
    total_people = 0

    def __init__(self, name, age):
        self.name = name
        self.age = age
        Person.total_people += 1

    @abstractmethod
    def display_info(self):
        pass

    def __str__(self):
        return f"Name: {self.name}, Age: {self.age}"

    def __repr__(self):
        return f"Person(name={self.name}, age={self.age})"


class Course:
    def __init__(self, course_name):
        self.course_name = course_name

    def __str__(self):
        return f"Course: {self.course_name}"


class Student(Person):
    total_students = 0

    def __init__(self, name, age, student_id, grades, courses=None):
        super().__init__(name, age)
        self.student_id = student_id
        self.grades = grades
        self.courses = [Course(course) for course in (courses or [])]
        Student.total_students += 1

    def display_info(self):
        courses = ', '.join([course.course_name for course in self.courses]) if self.courses else "No courses"
        return f"Student: {self.name}, Age: {self.age}, ID: {self.student_id}, Courses: {courses}, Grades: {self.grades}"

    @classmethod
    def total_students_count(cls):
        return f"Total students: {cls.total_students}"


class Professor(Person):
    total_professors = 0

    def __init__(self, name, age, professor_id, subjects=None):
        super().__init__(name, age)
        self.professor_id = professor_id
        self.subjects = subjects if subjects else []
        Professor.total_professors += 1

    def assign_subject(self, subject):
        self.subjects.append(subject)
        print(f"{self.name} has been assigned to teach {subject}")

    def display_info(self):
        subject_list = ', '.join(self.subjects) if self.subjects else "No subjects assigned"
        return f"Professor: {self.name}, Age: {self.age}, ID: {self.professor_id}, Subjects: {subject_list}"

    @classmethod
    def total_professors_count(cls):
        return f"Total professors: {cls.total_professors}"


class University:
    def __init__(self):
        self.people = []

    def add_person(self, person):
        if isinstance(person, Person):
            self.people.append(person)
            print(f"{person.name} has been added to the university.")
        else:
            print("Only instances of Person or its subclasses can be added.")

    def display_all_people(self):
        print("\nAll People in University:")
        if self.people:
            for person in self.people:
                print(person.display_info())
        else:
            print("No people in university.")

    def display_totals(self):
        print(Student.total_students_count())
        print(Professor.total_professors_count())
        print(f"Total people: {Person.total_people}")


# بيانات جاهزة للطلاب والأساتذة
def add_predefined_students():
    # إنشاء بيانات طلاب جاهزة
    student1 = Student("Alice", 20, "S001", [90, 85, 88], ["Math", "Science"])
    student2 = Student("Bob", 22, "S002", [78, 82, 80], ["English", "History"])
    university.add_person(student1)
    university.add_person(student2)


def add_predefined_professors():
    # إنشاء بيانات أساتذة جاهزة
    professor1 = Professor("Dr. Smith", 45, "P001", ["Math", "Physics"])
    professor2 = Professor("Dr. Johnson", 50, "P002", ["History", "Philosophy"])
    university.add_person(professor1)
    university.add_person(professor2)


def main_menu():
    while True:
        print("\n1. Add Predefined Students")
        print("2. Add Predefined Professors")
        print("3. Display All People")
        print("4. Display Totals")
        print("5. Exit")
        choice = input("Choose an option (1-5): ")

        if choice == '1':
            add_predefined_students()
        elif choice == '2':
            add_predefined_professors()
        elif choice == '3':
            university.display_all_people()
        elif choice == '4':
            university.display_totals()
        elif choice == '5':
            print("Exiting the program.")
            break  # خروج من الحلقة والتوقف عن العمل
        else:
            print("Invalid choice. Please choose a valid option.")


# إنشاء كائن للجامعة
university = University()

# تشغيل البرنامج
main_menu()
